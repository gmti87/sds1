{"version":3,"sources":["Project.ts"],"names":["MINIMUM_BUNDLE_SIZE","TUNNEL_TIMEOUT","treekillAsync","treekill","ngrokConnectAsync","ngrok","connect","ngrokKillAsync","kill","currentStatus","projectDir","packagerPort","expoServerPort","ProjectSettings","readPackagerInfoAsync","getManifestUrlWithFallbackAsync","projectRoot","url","UrlUtils","constructManifestUrlAsync","isUrlFallback","_assertValidProjectRoot","XDLError","_getFreePortAsync","rangeStart","port","hostnames","_requireFromProject","modulePath","exp","fullPath","require","e","getSlugAsync","skipSDKVersionRequirement","slug","getLatestReleaseAsync","options","user","UserManager","ensureLoggedInAsync","api","ApiV2","clientForUser","result","postAsync","owner","releaseChannel","count","platform","queryResult","length","isSelfHostedIndex","obj","sdkVersion","mergeAppDistributions","sourceDirs","outputDir","assetPathToWrite","path","resolve","fs","ensureDir","bundlesPathToWrite","androidIndexes","iosIndexes","sourceDir","promises","sourceAssetDir","outputAssetDir","assetPromise","copy","push","sourceBundleDir","outputBundleDir","bundlePromise","Promise","all","putJsonInMemory","indexPath","accumulator","index","JsonFile","readAsync","Array","isArray","androidIndexPath","iosIndexPath","getSortedIndex","indexes","sort","index1","index2","semver","eq","logger","global","error","gte","sortedAndroidIndexes","sortedIosIndexes","join","JSON","stringify","prepareHooks","hooks","hookType","validHooks","forEach","hook","file","fn","_fn","undefined","runHook","hookOptions","config","then","info","quiet","exportForAppHosting","publicUrl","assetUrl","defaultTarget","target","publishOptions","bundles","buildPublishBundlesAsync","dev","isDev","iosBundle","ios","code","androidBundle","android","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","pkg","_getPublishExpConfigAsync","assets","hostedUrl","assetPath","dumpAssetmap","assetmap","asset","hash","validPostExportHooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","releaseId","uuid","v4","hashIds","HashIds","v1","revisionId","encode","now","developer","tool","username","getCurrentUsernameAsync","ANONYMOUS_USERNAME","id","androidManifest","bundleUrl","dependencies","Object","keys","iosManifest","iosSourceMap","map","androidSourceMap","dumpSourcemap","iosMapName","iosMapPath","androidMapName","androidMapPath","truncateLastNLines","appendFile","debugHtml","log","msg","warn","stack","EmbeddedAssets","configureAsync","iosManifestUrl","androidManifestUrl","filePath","n","lines","readLastLines","read","to_vanquish","size","stat","truncate","findReusableBuildAsync","getCurrentUserAsync","buildReuseStatus","publishAsync","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","validPostPublishHooks","files","chalk","dim","TableText","createFilesTable","fallback","text","hasHooks","shouldPublishAndroidMaps","publishSourceMapPath","shouldPublishIosMaps","response","_uploadArtifactsAsync","serverError","Error","Sentry","captureException","publishManifestPath","shouldEmbedAssetsForExpoUpdates","ExponentTools","getManifestAsync","Accept","fullManifestUrl","replace","isKernel","_handleKernelPublishedAsync","formData","FormData","append","uploadFormDataAsync","locales","getResolvedLocalesAsync","bundleOptions","getenv","boolish","startReactNativeServerAsync","nonPersistent","maxWorkers","reset","resetCache","verbose","fetchPublishBundlesAsync","stopReactNativeServerAsync","platforms","ProjectUtils","getLogger","entryPoint","Exp","determineEntryPoint","opts","publishUrl","constructPublishUrlAsync","sourceMapUrl","constructSourceMapUrlAsync","assetsUrl","constructAssetsUrlAsync","_getForPlatformAsync","errorCode","minLength","iosAssetsJson","androidAssetsJson","parse","fullUrl","axios","request","responseType","transformResponse","data","proxy","validateStatus","status","headers","body","logError","message","kernelBundleUrl","scheme","host","kernel","androidManifestPath","manifest","writeFile","iosManifestPath","getConfigAsync","configName","configPrefix","ThirdParty","getManifest","_validateManifest","bundleIdentifier","package","_validateOptions","schema","joi","object","current","boolean","mode","string","any","valid","expIds","array","type","regex","strict","validate","toString","_getExpAsync","version","name","toLowerCase","getBuildStatusAsync","startBuildAsync","putAsync","_waitForRunningAsync","retries","test","METRO_VERBOSE_WARNING","NODE_12_WINDOWS_METRO_ERROR","NODE_12_WINDOWS_METRO_SUGGESTION","_logPackagerOutput","level","output","_isIgnorableDuplicateModuleWarning","logDebug","_isIgnorableMetroConsoleOutput","_isIgnorableRnpmWarning","includes","logInfo","startsWith","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","reactNativeNodeModulesCollisionRegex","RegExp","_isIgnorableBugReportingExtraData","_isAppRegistryStartupMessage","_handleDeviceLogs","deviceId","deviceName","logs","i","args","logLevel","tag","groupDepth","shouldHide","includesStack","Watchman","addToPathAsync","unblockAndGetVersionAsync","customLogReporterPath","__dirname","sourceExtsConfig","isTS","isReact","isModern","sourceExts","packagerOpts","Versions","lteSdkVersion","gteSdkVersion","assetPlugins","userPackagerOpts","userSourceExts","Set","cliOpts","key","val","entries","process","env","EXPO_DEBUG","defaultCliPath","cliPath","rnCliPath","nodePath","_nodePathForProjectRoot","nodePathEnv","NODE_PATH","packagerProcess","child_process","fork","cwd","REACT_NATIVE_APP_ROOT","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","stdout","stderr","setEncoding","pipe","exitPromise","reject","once","packagerUrl","constructBundleUrlAsync","urlType","hostType","race","paths","directory","parentDirectory","dirname","delimiter","packagerInfo","startExpoServerAsync","stopExpoServerAsync","app","use","express","json","limit","urlencoded","extended","ConnectionStatus","isOffline","validateWithoutNetworkAsync","manifestHandler","get","post","req","res","send","server","close","expRc","manifestPort","listen","address","saveRecentExpRootAsync","method","startDevServerAsync","startOptions","EXPO_TARGET","middleware","_connectToNgrokAsync","hostnameAsync","ngrokPid","attempts","configPath","UserSettings","dotExpoHomeDirectory","hostname","error_code","resetProjectRandomnessAsync","startTunnelsAsync","stopTunnelsAsync","Android","startAdbReverseAsync","packageShortName","base","startedTunnelsSuccessfully","expoServerNgrokUrl","authtoken","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","packagerNgrokUrl","logWithLevel","_expoEventType","addListener","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","setOptionsAsync","Number","isInteger","getUrlAsync","startAsync","webOnly","Webpack","restartAsync","DevSession","startSession","offline","_stopInternalAsync","stopSession","stopAsync","maybeStopAdbDaemonAsync","stopWebOnlyAsync","setTimeout","webpackServerPort"],"mappings":"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","sourcesContent":["import {\n  ExpoAppManifest,\n  ExpoConfig,\n  Hook,\n  HookArguments,\n  HookType,\n  PackageJSONConfig,\n  Platform,\n  ProjectTarget,\n  configFilename,\n  getConfig,\n  getDefaultTarget,\n  readExpRcAsync,\n  resolveModule,\n} from '@expo/config';\nimport { getBareExtensions, getManagedExtensions } from '@expo/config/paths';\nimport { MetroDevServerOptions, bundleAsync, runMetroDevServerAsync } from '@expo/dev-server';\nimport JsonFile from '@expo/json-file';\nimport ngrok from '@expo/ngrok';\nimport joi from '@hapi/joi';\nimport axios from 'axios';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport crypto from 'crypto';\nimport decache from 'decache';\nimport delayAsync from 'delay-async';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport HashIds from 'hashids';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport { AddressInfo } from 'net';\nimport path from 'path';\nimport readLastLines from 'read-last-lines';\nimport semver from 'semver';\nimport slug from 'slugify';\nimport split from 'split';\nimport terminalLink from 'terminal-link';\nimport treekill from 'tree-kill';\nimport urljoin from 'url-join';\nimport { promisify } from 'util';\nimport uuid from 'uuid';\n\nimport Analytics from './Analytics';\nimport * as Android from './Android';\nimport ApiV2 from './ApiV2';\nimport Config from './Config';\nimport * as ConnectionStatus from './ConnectionStatus';\nimport * as DevSession from './DevSession';\nimport * as EmbeddedAssets from './EmbeddedAssets';\nimport { maySkipManifestValidation } from './Env';\nimport { ErrorCode } from './ErrorCode';\nimport * as Exp from './Exp';\nimport logger from './Logger';\nimport { Asset, exportAssetsAsync, publishAssetsAsync } from './ProjectAssets';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as Sentry from './Sentry';\nimport * as ThirdParty from './ThirdParty';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME, User } from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport * as Webpack from './Webpack';\nimport XDLError from './XDLError';\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as TableText from './logs/TableText';\nimport * as Doctor from './project/Doctor';\nimport { getManifestHandler } from './project/ManifestHandler';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport { writeArtifactSafelyAsync } from './tools/ArtifactUtils';\nimport FormData from './tools/FormData';\n\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nconst treekillAsync = promisify<number, string>(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\n\ntype SelfHostedIndex = ExpoAppManifest & {\n  dependencies: string[];\n};\n\ntype LoadedHook = Hook & {\n  _fn: (input: HookArguments) => any;\n};\n\nexport type StartOptions = {\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n  target?: ProjectTarget;\n};\n\ntype PublishOptions = {\n  releaseChannel?: string;\n  target?: ProjectTarget;\n  resetCache?: boolean;\n  maxWorkers?: number;\n  quiet?: boolean;\n};\n\ntype PackagerOptions = {\n  dev: boolean;\n  minify: boolean;\n};\n\ntype Release = {\n  fullName: string;\n  channel: string;\n  channelId: string;\n  publicationId: string;\n  appVersion: string;\n  sdkVersion: string;\n  publishedTime: string;\n  platform: string;\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\n// DECPRECATED: use UrlUtils.constructManifestUrlAsync\nexport async function getManifestUrlWithFallbackAsync(\n  projectRoot: string\n): Promise<{ url: string; isUrlFallback: false }> {\n  return {\n    url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n    isUrlFallback: false,\n  };\n}\n\nasync function _assertValidProjectRoot(projectRoot: string) {\n  if (!projectRoot) {\n    throw new XDLError('NO_PROJECT_ROOT', 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart: number) {\n  const port = await freeportAsync(rangeStart, { hostnames: [null, 'localhost'] });\n  if (!port) {\n    throw new XDLError('NO_PORT_FOUND', 'No available port found');\n  }\n\n  return port;\n}\n\nfunction _requireFromProject(modulePath: string, projectRoot: string, exp: ExpoConfig) {\n  try {\n    const fullPath = resolveModule(modulePath, projectRoot, exp);\n    // Clear the require cache for this module so get a fresh version of it\n    // without requiring the user to restart Expo CLI\n    decache(fullPath);\n    // $FlowIssue: doesn't work with dynamic requires\n    return require(fullPath);\n  } catch (e) {\n    return null;\n  }\n}\n\n// TODO: Move to @expo/config\nexport async function getSlugAsync({\n  projectRoot,\n  exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp,\n}: {\n  projectRoot: string;\n  exp?: Pick<ExpoConfig, 'slug'>;\n}): Promise<string> {\n  if (exp.slug) {\n    return exp.slug;\n  }\n  throw new XDLError(\n    'INVALID_MANIFEST',\n    `Your project config in ${projectRoot} must contain a \"slug\" field. Please supply this in your app.config.js or app.json`\n  );\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string;\n    platform: string;\n    owner?: string;\n  }\n): Promise<Release | null> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  const result = await api.postAsync('publish/history', {\n    owner: options.owner,\n    slug: await getSlugAsync({ projectRoot }),\n    releaseChannel: options.releaseChannel,\n    count: 1,\n    platform: options.platform,\n  });\n  const { queryResult } = result;\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\nfunction isSelfHostedIndex(obj: any): obj is SelfHostedIndex {\n  return !!obj.sdkVersion;\n}\n\n// Takes multiple exported apps in sourceDirs and coalesces them to one app in outputDir\nexport async function mergeAppDistributions(\n  projectRoot: string,\n  sourceDirs: string[],\n  outputDir: string\n): Promise<void> {\n  const assetPathToWrite = path.resolve(projectRoot, outputDir, 'assets');\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, outputDir, 'bundles');\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // merge files from bundles and assets\n  const androidIndexes: SelfHostedIndex[] = [];\n  const iosIndexes: SelfHostedIndex[] = [];\n\n  for (const sourceDir of sourceDirs) {\n    const promises = [];\n\n    // copy over assets/bundles from other src dirs to the output dir\n    if (sourceDir !== outputDir) {\n      // copy file over to assetPath\n      const sourceAssetDir = path.resolve(projectRoot, sourceDir, 'assets');\n      const outputAssetDir = path.resolve(projectRoot, outputDir, 'assets');\n      const assetPromise = fs.copy(sourceAssetDir, outputAssetDir);\n      promises.push(assetPromise);\n\n      // copy files over to bundlePath\n      const sourceBundleDir = path.resolve(projectRoot, sourceDir, 'bundles');\n      const outputBundleDir = path.resolve(projectRoot, outputDir, 'bundles');\n      const bundlePromise = fs.copy(sourceBundleDir, outputBundleDir);\n      promises.push(bundlePromise);\n\n      await Promise.all(promises);\n    }\n\n    // put index.jsons into memory\n    const putJsonInMemory = async (indexPath: string, accumulator: SelfHostedIndex[]) => {\n      const index = await JsonFile.readAsync(indexPath);\n\n      if (!isSelfHostedIndex(index)) {\n        throw new XDLError(\n          'INVALID_MANIFEST',\n          `Invalid index.json, must specify an sdkVersion at ${indexPath}`\n        );\n      }\n      if (Array.isArray(index)) {\n        // index.json could also be an array\n        accumulator.push(...index);\n      } else {\n        accumulator.push(index);\n      }\n    };\n\n    const androidIndexPath = path.resolve(projectRoot, sourceDir, 'android-index.json');\n    await putJsonInMemory(androidIndexPath, androidIndexes);\n\n    const iosIndexPath = path.resolve(projectRoot, sourceDir, 'ios-index.json');\n    await putJsonInMemory(iosIndexPath, iosIndexes);\n  }\n\n  // sort indexes by descending sdk value\n  const getSortedIndex = (indexes: SelfHostedIndex[]) => {\n    return indexes.sort((index1: SelfHostedIndex, index2: SelfHostedIndex) => {\n      if (semver.eq(index1.sdkVersion, index2.sdkVersion)) {\n        logger.global.error(\n          `Encountered multiple index.json with the same SDK version ${index1.sdkVersion}. This could result in undefined behavior.`\n        );\n      }\n      return semver.gte(index1.sdkVersion, index2.sdkVersion) ? -1 : 1;\n    });\n  };\n\n  const sortedAndroidIndexes = getSortedIndex(androidIndexes);\n  const sortedIosIndexes = getSortedIndex(iosIndexes);\n\n  // Save the json arrays to disk\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(sortedAndroidIndexes)\n  );\n\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(sortedIosIndexes)\n  );\n}\n\nfunction prepareHooks(\n  hooks: ExpoConfig['hooks'],\n  hookType: HookType,\n  projectRoot: string,\n  exp: ExpoConfig\n) {\n  const validHooks: LoadedHook[] = [];\n\n  if (hooks) {\n    if (hooks[hookType]) {\n      hooks[hookType]!.forEach((hook: any) => {\n        const { file } = hook;\n        const fn = _requireFromProject(file, projectRoot, exp);\n        if (typeof fn !== 'function') {\n          logger.global.error(\n            `Unable to load ${hookType} hook: '${file}'. The module does not export a function.`\n          );\n        } else {\n          hook._fn = fn;\n          validHooks.push(hook);\n        }\n      });\n    }\n\n    if (hooks[hookType] !== undefined && validHooks.length !== hooks[hookType]?.length) {\n      throw new XDLError(\n        'HOOK_INITIALIZATION_ERROR',\n        `Please fix your ${hookType} hook configuration`\n      );\n    }\n  }\n\n  return validHooks;\n}\n\nexport async function runHook(hook: LoadedHook, hookOptions: Omit<HookArguments, 'config'>) {\n  let result = hook._fn({\n    config: hook.config,\n    ...hookOptions,\n  });\n\n  // If it's a promise, wait for it to resolve\n  if (result && result.then) {\n    result = await result;\n  }\n\n  if (result) {\n    logger.global.info({ quiet: true }, result);\n  }\n}\n\n/**\n * Apps exporting for self hosting will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportForAppHosting(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {\n    isDev?: boolean;\n    dumpAssetmap?: boolean;\n    dumpSourcemap?: boolean;\n    publishOptions?: PublishOptions;\n  } = {}\n): Promise<void> {\n  const defaultTarget = getDefaultTarget(projectRoot);\n  const target = options.publishOptions?.target ?? defaultTarget;\n\n  // build the bundles\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  const bundles = await buildPublishBundlesAsync(projectRoot, options.publishOptions, {\n    dev: options.isDev,\n  });\n  const iosBundle = bundles.ios.code;\n  const androidBundle = bundles.android.code;\n\n  const iosBundleHash = crypto.createHash('md5').update(iosBundle).digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(outputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto.createHash('md5').update(androidBundle).digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(outputDir, 'bundles', androidBundleUrl);\n\n  await writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n\n  logger.global.info('Finished saving JS Bundles.');\n\n  // save the assets\n  // Get project config\n  const publishOptions = options.publishOptions || {};\n  const { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, publishOptions);\n  const { assets } = await exportAssetsAsync({\n    projectRoot,\n    exp,\n    hostedUrl: publicUrl,\n    assetPath: 'assets',\n    outputDir,\n    bundles,\n  });\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n\n    const assetmap: { [hash: string]: Asset } = {};\n\n    assets.forEach((asset: Asset) => {\n      assetmap[asset.hash] = asset;\n    });\n\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  // Delete keys that are normally deleted in the publish process\n  const { hooks } = exp;\n  delete exp.hooks;\n  const validPostExportHooks: LoadedHook[] = prepareHooks(hooks, 'postExport', projectRoot, exp);\n\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  exp.publishedTime = new Date().toISOString();\n  exp.commitTime = new Date().toISOString();\n  exp.releaseId = uuid.v4();\n\n  // generate revisionId and id the same way www does\n  const hashIds = new HashIds(uuid.v1(), 10);\n  exp.revisionId = hashIds.encode(Date.now());\n\n  if (options.isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!exp.slug) {\n    throw new XDLError('INVALID_MANIFEST', 'Must provide a slug field in the app.json manifest.');\n  }\n\n  let username = await UserManager.getCurrentUsernameAsync();\n\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n\n  exp.id = `@${username}/${exp.slug}`;\n\n  // save the android manifest\n  const androidManifest = {\n    ...exp,\n    bundleUrl: urljoin(publicUrl, 'bundles', androidBundleUrl),\n    platform: 'android',\n    dependencies: Object.keys(pkg.dependencies),\n  };\n\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(androidManifest)\n  );\n\n  // save the ios manifest\n  const iosManifest = {\n    ...exp,\n    bundleUrl: urljoin(publicUrl, 'bundles', iosBundleUrl),\n    platform: 'ios',\n    dependencies: Object.keys(pkg.dependencies),\n  };\n\n  await writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(iosManifest)\n  );\n\n  const iosSourceMap = bundles.ios.map;\n  const androidSourceMap = bundles.android.map;\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    // write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(outputDir, 'bundles', iosMapName);\n    await writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(outputDir, 'bundles', androidMapName);\n    await writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    // Remove original mapping to incorrect sourcemap paths\n    logger.global.info('Configuring sourcemaps');\n    await truncateLastNLines(iosJsPath, 1);\n    await truncateLastNLines(androidJsPath, 1);\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n    <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n    <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n    Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n    You can see a red coloured folder containing the original source code from your bundle.\n    `;\n\n    await writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n\n  const hookOptions = {\n    url: null,\n    exp,\n    iosBundle,\n    iosSourceMap,\n    iosManifest,\n    androidBundle,\n    androidSourceMap,\n    androidManifest,\n    projectRoot,\n    log: (msg: any) => {\n      logger.global.info({ quiet: true }, msg);\n    },\n  };\n\n  for (const hook of validPostExportHooks) {\n    logger.global.info(`Running postExport hook: ${hook.file}`);\n\n    try {\n      runHook(hook, hookOptions);\n    } catch (e) {\n      logger.global.warn(`Warning: postExport hook '${hook.file}' failed: ${e.stack}`);\n    }\n  }\n\n  // configure embedded assets for expo-updates or ExpoKit\n  await EmbeddedAssets.configureAsync({\n    projectRoot,\n    pkg,\n    exp,\n    iosManifestUrl: urljoin(publicUrl, 'ios-index.json'),\n    iosManifest,\n    iosBundle,\n    iosSourceMap,\n    androidManifestUrl: urljoin(publicUrl, 'android-index.json'),\n    androidManifest,\n    androidBundle,\n    androidSourceMap,\n    target,\n  });\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n\nexport async function findReusableBuildAsync(\n  releaseChannel: string,\n  platform: string,\n  sdkVersion: string,\n  slug: string\n): Promise<{ downloadUrl?: string; canReuse: boolean }> {\n  const user = await UserManager.getCurrentUserAsync();\n\n  const buildReuseStatus = await ApiV2.clientForUser(user).postAsync('standalone-build/reuse', {\n    releaseChannel,\n    platform,\n    sdkVersion,\n    slug,\n  });\n\n  return buildReuseStatus;\n}\n\nexport interface PublishedProjectResult {\n  /**\n   * Project manifest URL\n   */\n  url: string;\n  /**\n   * TODO: What is this?\n   */\n  ids: string[];\n  /**\n   * TODO: What is this? Where does it come from?\n   */\n  err?: string;\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: PublishOptions = {}\n): Promise<PublishedProjectResult> {\n  options.target = options.target ?? getDefaultTarget(projectRoot);\n  const target = options.target;\n  const user = await UserManager.ensureLoggedInAsync();\n\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus === Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      'PUBLISH_VALIDATION_ERROR',\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  const { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  const { hooks } = exp;\n  delete exp.hooks;\n  const validPostPublishHooks: LoadedHook[] = prepareHooks(hooks, 'postPublish', projectRoot, exp);\n  const bundles = await buildPublishBundlesAsync(projectRoot, options);\n  const androidBundle = bundles.android.code;\n  const iosBundle = bundles.ios.code;\n\n  const files = [\n    ['index.ios.js', bundles.ios.code],\n    ['index.android.js', bundles.android.code],\n  ];\n  // Account for inline source maps\n  if (bundles.ios.map) {\n    files.push([chalk.dim('index.ios.js.map'), bundles.ios.map]);\n  }\n  if (bundles.android.map) {\n    files.push([chalk.dim('index.android.js.map'), bundles.android.map]);\n  }\n\n  logger.global.info('');\n  logger.global.info(TableText.createFilesTable(files));\n  logger.global.info('');\n  logger.global.info(\n    terminalLink(\n      'Learn more about JavaScript bundle sizes',\n      `https://expo.fyi/javascript-bundle-sizes`,\n      { fallback: (text, url) => `${text}: ${url}` }\n    )\n  );\n  logger.global.info('');\n\n  await publishAssetsAsync({ projectRoot, exp, bundles });\n\n  const hasHooks = validPostPublishHooks.length > 0;\n\n  const shouldPublishAndroidMaps = !!exp.android && !!exp.android.publishSourceMapPath;\n  const shouldPublishIosMaps = !!exp.ios && !!exp.ios.publishSourceMapPath;\n  const androidSourceMap = hasHooks || shouldPublishAndroidMaps ? bundles.android.map : null;\n  const iosSourceMap = hasHooks || shouldPublishIosMaps ? bundles.ios.map : null;\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      pkg,\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app.json or app.config.js.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  let androidManifest = {};\n  let iosManifest = {};\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath) ||\n    EmbeddedAssets.shouldEmbedAssetsForExpoUpdates(projectRoot, exp, pkg, target)\n  ) {\n    [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: (msg: any) => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (const hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        runHook(hook, hookOptions);\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n  }\n\n  const fullManifestUrl = response.url.replace('exp://', 'https://');\n  await EmbeddedAssets.configureAsync({\n    projectRoot,\n    pkg,\n    exp,\n    releaseChannel: options.releaseChannel ?? 'default',\n    iosManifestUrl: fullManifestUrl,\n    iosManifest,\n    iosBundle,\n    iosSourceMap,\n    androidManifestUrl: fullManifestUrl,\n    androidManifest,\n    androidBundle,\n    androidSourceMap,\n    target,\n  });\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({\n  exp,\n  iosBundle,\n  androidBundle,\n  options,\n  pkg,\n}: {\n  exp: ExpoConfig;\n  iosBundle: string;\n  androidBundle: string;\n  options: PublishOptions;\n  pkg: PackageJSONConfig;\n}) {\n  logger.global.info('');\n  logger.global.info('Uploading JavaScript bundles');\n  const formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('packageJson', JSON.stringify(pkg));\n  formData.append('iosBundle', iosBundle, 'iosBundle');\n  formData.append('androidBundle', androidBundle, 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n\n  return await api.uploadFormDataAsync('publish/new', formData);\n}\n\nasync function _getPublishExpConfigAsync(\n  projectRoot: string,\n  options: PublishOptions\n): Promise<{\n  exp: ExpoAppManifest;\n  pkg: PackageJSONConfig;\n}> {\n  if (options.releaseChannel != null && typeof options.releaseChannel !== 'string') {\n    throw new XDLError('INVALID_OPTIONS', 'releaseChannel must be a string');\n  }\n  options.releaseChannel = options.releaseChannel || 'default';\n\n  // Verify that exp/app.json and package.json exist\n  const { exp, pkg } = getConfig(projectRoot);\n\n  if (exp.android?.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios?.config) {\n    delete exp.ios.config;\n  }\n\n  const { sdkVersion } = exp;\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (sdkVersion === 'UNVERSIONED' && !maySkipManifestValidation()) {\n    throw new XDLError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(projectRoot, exp);\n  return {\n    exp: {\n      ...exp,\n      sdkVersion: sdkVersion!,\n    },\n    pkg,\n  };\n}\n\nasync function buildPublishBundlesAsync(\n  projectRoot: string,\n  publishOptions: PublishOptions = {},\n  bundleOptions: { dev?: boolean } = {}\n) {\n  if (!getenv.boolish('EXPO_USE_DEV_SERVER', false)) {\n    try {\n      await startReactNativeServerAsync({\n        projectRoot,\n        options: {\n          nonPersistent: true,\n          maxWorkers: publishOptions.maxWorkers,\n          target: publishOptions.target,\n          reset: publishOptions.resetCache,\n        },\n        verbose: !publishOptions.quiet,\n      });\n      return await fetchPublishBundlesAsync(projectRoot);\n    } finally {\n      await stopReactNativeServerAsync(projectRoot);\n    }\n  }\n\n  const platforms: Platform[] = ['android', 'ios'];\n  const [android, ios] = await bundleAsync(\n    projectRoot,\n    {\n      target: publishOptions.target,\n      resetCache: publishOptions.resetCache,\n      logger: ProjectUtils.getLogger(projectRoot),\n      quiet: publishOptions.quiet,\n    },\n    platforms.map((platform: Platform) => ({\n      platform,\n      entryPoint: Exp.determineEntryPoint(projectRoot, platform),\n      dev: bundleOptions.dev,\n    }))\n  );\n\n  return {\n    android,\n    ios,\n  };\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function fetchPublishBundlesAsync(projectRoot: string, opts?: PackagerOptions) {\n  const entryPoint = Exp.determineEntryPoint(projectRoot);\n  const publishUrl = await UrlUtils.constructPublishUrlAsync(\n    projectRoot,\n    entryPoint,\n    undefined,\n    opts\n  );\n  const sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n  const assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building iOS bundle');\n  const iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  const androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building source maps');\n  const iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n  const androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building asset maps');\n  const iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: 'INVALID_ASSETS',\n  });\n  const androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: 'INVALID_ASSETS',\n  });\n\n  return {\n    android: { code: androidBundle, map: androidSourceMap, assets: JSON.parse(androidAssetsJson) },\n    ios: { code: iosBundle, map: iosSourceMap, assets: JSON.parse(iosAssetsJson) },\n  };\n}\n\nasync function _getForPlatformAsync(\n  projectRoot: string,\n  url: string,\n  platform: Platform,\n  { errorCode, minLength }: { errorCode: ErrorCode; minLength?: number }\n): Promise<string> {\n  const fullUrl = `${url}&platform=${platform}`;\n  let response;\n\n  try {\n    response = await axios.request({\n      url: fullUrl,\n      responseType: 'text',\n      // Workaround for https://github.com/axios/axios/issues/907.\n      // Without transformResponse, axios will parse the body as JSON regardless of the responseType/\n      transformResponse: [data => data],\n      proxy: false,\n      validateStatus: status => status === 200,\n      headers: {\n        'Exponent-Platform': platform,\n      },\n    });\n  } catch (error) {\n    if (error.response) {\n      if (error.response.data) {\n        let body;\n        try {\n          body = JSON.parse(error.response.data);\n        } catch (e) {\n          ProjectUtils.logError(projectRoot, 'expo', error.response.data);\n        }\n\n        if (body) {\n          if (body.message) {\n            ProjectUtils.logError(projectRoot, 'expo', body.message);\n          } else {\n            ProjectUtils.logError(projectRoot, 'expo', error.response.data);\n          }\n        }\n      }\n      throw new XDLError(\n        errorCode,\n        `Packager URL ${fullUrl} returned unexpected code ${error.response.status}. ` +\n          'Please open your project in the Expo app and see if there are any errors. ' +\n          'Also scroll up and make sure there were no errors or warnings when opening your project.'\n      );\n    } else {\n      throw error;\n    }\n  }\n\n  if (!response.data || (minLength && response.data.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.data}`);\n  }\n\n  return response.data;\n}\n\nasync function _handleKernelPublishedAsync({\n  projectRoot,\n  user,\n  exp,\n  url,\n}: {\n  projectRoot: string;\n  user: User;\n  exp: ExpoAppManifest;\n  url: string;\n}) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel?.androidManifestPath) {\n    const manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel?.iosManifestPath) {\n    const manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\ntype GetExpConfigOptions = {\n  current?: boolean;\n  mode?: string;\n  platform?: 'android' | 'ios' | 'all';\n  expIds?: string[];\n  type?: string;\n  releaseChannel?: string;\n  bundleIdentifier?: string;\n  publicUrl?: string;\n  sdkVersion?: string;\n};\n\nasync function getConfigAsync(\n  projectRoot: string,\n  options: Pick<GetExpConfigOptions, 'publicUrl' | 'platform'> = {}\n) {\n  if (!options.publicUrl) {\n    // get the manifest from the project directory\n    const { exp, pkg } = getConfig(projectRoot);\n    const configName = configFilename(projectRoot);\n    return {\n      exp,\n      pkg,\n      configName: configFilename(projectRoot),\n      configPrefix: configName === 'app.json' ? 'expo.' : '',\n    };\n  } else {\n    // get the externally hosted manifest\n    return {\n      exp: await ThirdParty.getManifest(options.publicUrl, options),\n      configName: options.publicUrl,\n      configPrefix: '',\n      pkg: {},\n    };\n  }\n}\n\ntype JobState = 'pending' | 'started' | 'in-progress' | 'finished' | 'errored' | 'sent-to-queue';\n\nexport type TurtleMode = 'normal' | 'high' | 'high_only';\n\n// https://github.com/expo/universe/blob/283efaba3acfdefdc7db12f649516b6d6a94bec4/server/www/src/data/entities/builds/BuildJobEntity.ts#L25-L56\nexport interface BuildJobFields {\n  id: string;\n  experienceName: string;\n  status: JobState;\n  platform: 'ios' | 'android';\n  userId: string | null;\n  experienceId: string;\n  artifactId: string | null;\n  nonce: string | null;\n  artifacts: {\n    url?: string;\n    manifestPlistUrl?: string;\n  } | null;\n  config: {\n    buildType?: string;\n    releaseChannel?: string;\n    bundleIdentifier?: string;\n  };\n  logs: object | null;\n  extraData: {\n    request_id?: string;\n    turtleMode?: TurtleMode;\n  } | null;\n  created: Date;\n  updated: Date;\n  expirationDate: Date;\n  sdkVersion: string | null;\n  turtleVersion: string | null;\n  buildDuration: number | null;\n  priority: string;\n  accountId: string | null;\n}\n\nexport type BuildStatusResult = {\n  jobs: BuildJobFields[];\n  err: null;\n  userHasBuiltAppBefore: boolean;\n  userHasBuiltExperienceBefore: boolean;\n  canPurchasePriorityBuilds: boolean;\n  numberOfRemainingPriorityBuilds: number;\n  hasUnlimitedPriorityBuilds: boolean;\n};\n\nexport type BuildCreatedResult = {\n  id: string;\n  ids: string[];\n  priority: 'normal' | 'high';\n  canPurchasePriorityBuilds: boolean;\n  numberOfRemainingPriorityBuilds: number;\n  hasUnlimitedPriorityBuilds: boolean;\n};\n\nfunction _validateManifest(options: any, exp: any, configName: string, configPrefix: string) {\n  if (options.platform === 'ios' || options.platform === 'all') {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a bundle identifier in order to build this experience for iOS. ` +\n          `Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.platform === 'android' || options.platform === 'all') {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a java package in order to build this experience for Android. ` +\n          `Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n}\nfunction _validateOptions(options: any) {\n  const schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator', 'client', 'app-bundle', 'apk'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: joi.string().regex(/^[a-zA-Z][a-zA-Z0-9\\-.]+$/),\n    publicUrl: joi.string(),\n    sdkVersion: joi.string().strict(),\n  });\n\n  const { error } = schema.validate(options);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n}\n\nasync function _getExpAsync(\n  projectRoot: string,\n  options: Pick<GetExpConfigOptions, 'publicUrl' | 'mode' | 'platform'>\n) {\n  const { exp, pkg, configName, configPrefix } = await getConfigAsync(projectRoot, options);\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      'NO_PACKAGE_JSON',\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && 'version' in pkg && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.name && 'name' in pkg && typeof pkg.name === 'string') {\n    exp.name = pkg.name;\n  }\n  if (!exp.slug && typeof exp.name === 'string') {\n    exp.slug = slug(exp.name.toLowerCase());\n  }\n  return { exp, configName, configPrefix };\n}\n\nexport async function getBuildStatusAsync(\n  projectRoot: string,\n  options: GetExpConfigOptions = {}\n): Promise<BuildStatusResult> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  _assertValidProjectRoot(projectRoot);\n  _validateOptions(options);\n  const { exp } = await _getExpAsync(projectRoot, options);\n\n  const api = ApiV2.clientForUser(user);\n  return await api.postAsync('build/status', { manifest: exp, options });\n}\n\nexport async function startBuildAsync(\n  projectRoot: string,\n  options: GetExpConfigOptions = {}\n): Promise<BuildCreatedResult> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  _assertValidProjectRoot(projectRoot);\n  _validateOptions(options);\n  const { exp, configName, configPrefix } = await _getExpAsync(projectRoot, options);\n  _validateManifest(options, exp, configName, configPrefix);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  const api = ApiV2.clientForUser(user);\n  return await api.putAsync('build/start', { manifest: exp, options });\n}\n\nasync function _waitForRunningAsync(\n  projectRoot: string,\n  url: string,\n  retries: number = 300\n): Promise<true> {\n  try {\n    const response = await axios.request({\n      url,\n      responseType: 'text',\n      proxy: false,\n    });\n    if (/packager-status:running/.test(response.data)) {\n      return true;\n    } else if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. Server response: ${response.data}`\n      );\n    }\n  } catch (e) {\n    if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. ${e.message}`\n      );\n    }\n  }\n\n  if (retries <= 0) {\n    throw new Error('Connecting to Metro bundler failed.');\n  } else {\n    await delayAsync(100);\n    return _waitForRunningAsync(projectRoot, url, retries - 1);\n  }\n}\n\n// The --verbose flag is intended for react-native-cli/metro, not expo-cli\nconst METRO_VERBOSE_WARNING = 'Run CLI with --verbose flag for more details.';\n\n// Remove these constants and related code when SDK35 isn't supported anymore\n// Context: https://github.com/expo/expo-cli/issues/1074\nconst NODE_12_WINDOWS_METRO_ERROR = `Invalid regular expression: /(.*\\\\__fixtures__\\\\.*|node_modules[\\\\]react[\\\\]dist[\\\\].*|website\\\\node_modules\\\\.*|heapCapture\\\\bundle.js|.*\\\\__tests__\\\\.*)$/: Unterminated character class`;\nconst NODE_12_WINDOWS_METRO_SUGGESTION = `\\nUnable to start the project due to a documented incompatibility between Node 12 LTS and Expo SDK 35 on Windows.\nPlease refer to this GitHub comment for a solution:\nhttps://github.com/expo/expo-cli/issues/1074#issuecomment-559220752\\n`;\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (_isIgnorableMetroConsoleOutput(output) || _isIgnorableRnpmWarning(output)) {\n    ProjectUtils.logDebug(projectRoot, 'expo', output);\n    return;\n  }\n\n  if (output.includes(NODE_12_WINDOWS_METRO_ERROR)) {\n    ProjectUtils.logError(projectRoot, 'expo', NODE_12_WINDOWS_METRO_SUGGESTION);\n    return;\n  }\n\n  if (output.includes(METRO_VERBOSE_WARNING)) {\n    output = output.replace(METRO_VERBOSE_WARNING, '');\n  }\n\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableMetroConsoleOutput(output: string) {\n  // As of react-native 0.61.x, Metro prints console logs from the device to console, without\n  // passing them through the custom log reporter.\n  //\n  // Managed apps have a separate remote logging implementation included in the Expo SDK,\n  // (see: _handleDeviceLogs), so we can just ignore these device logs from Metro.\n  // if (/^ () /)\n  //\n  // These logs originate from:\n  // https://github.com/facebook/metro/blob/e8181fb9db7db31adf7d1ed9ab840f54449ef238/packages/metro/src/lib/logToConsole.js#L50\n  return /^\\s+(INFO|WARN|LOG|GROUP|DEBUG) /.test(output);\n}\n\nfunction _isIgnorableRnpmWarning(output: string) {\n  return output.startsWith(\n    'warn The following packages use deprecated \"rnpm\" config that will stop working from next release'\n  );\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  const reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  const reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  const reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _isIgnorableBugReportingExtraData(body: any[]) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _isAppRegistryStartupMessage(body: any[]) {\n  return (\n    body.length === 1 &&\n    (/^Running application \"main\" with appParams:/.test(body[0]) ||\n      /^Running \"main\" with \\{/.test(body[0]))\n  );\n}\n\ntype ConsoleLogLevel = 'info' | 'warn' | 'error' | 'debug';\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    const log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let { level } = log;\n\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = 'debug';\n    }\n    if (_isAppRegistryStartupMessage(body)) {\n      body = [`Running application on ${deviceName}.`];\n    }\n\n    const args = body.map((obj: any) => {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n      if (obj === 'null') {\n        return 'null';\n      }\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n      try {\n        return JSON.stringify(obj);\n      } catch (e) {\n        return obj.toString();\n      }\n    });\n    const logLevel =\n      level === 'info' || level === 'warn' || level === 'error' || level === 'debug'\n        ? (level as ConsoleLogLevel)\n        : 'info';\n    ProjectUtils.getLogger(projectRoot)[logLevel](\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      ...args\n    );\n  }\n}\nexport async function startReactNativeServerAsync({\n  projectRoot,\n  options = {},\n  exp = getConfig(projectRoot).exp,\n  verbose = true,\n}: {\n  projectRoot: string;\n  options: StartOptions;\n  exp?: ExpoConfig;\n  verbose?: boolean;\n}): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n\n  const customLogReporterPath: string = require.resolve(path.join(__dirname, '../build/reporter'));\n\n  // TODO: Bacon: Support .mjs (short-lived JS modules extension that some packages use)\n  const sourceExtsConfig = { isTS: true, isReact: true, isModern: false };\n  const sourceExts =\n    options.target === 'bare'\n      ? getBareExtensions([], sourceExtsConfig)\n      : getManagedExtensions([], sourceExtsConfig);\n\n  let packagerOpts: { [key: string]: any } = {\n    port: packagerPort,\n    customLogReporterPath,\n    sourceExts,\n  };\n\n  if (options.nonPersistent && Versions.lteSdkVersion(exp, '32.0.0')) {\n    packagerOpts.nonPersistent = true;\n  }\n\n  if (Versions.gteSdkVersion(exp, '33.0.0')) {\n    // starting with SDK 37, we bundle this plugin with the expo-asset package instead of expo,\n    // so check there first and fall back to expo if we can't find it in expo-asset\n    try {\n      packagerOpts.assetPlugins = resolveModule(\n        'expo-asset/tools/hashAssetFiles',\n        projectRoot,\n        exp\n      );\n    } catch (e) {\n      try {\n        packagerOpts.assetPlugins = resolveModule('expo/tools/hashAssetFiles', projectRoot, exp);\n      } catch (e) {\n        throw new Error(\n          'Unable to find the expo-asset package in the current project. Install it and try again.'\n        );\n      }\n    }\n  }\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    // Provide a fallback if the value isn't given\n    const userSourceExts = userPackagerOpts.sourceExts ?? [];\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      // In order to prevent people from forgetting to include the .expo extension or other things\n      // NOTE(brentvatne): we should probably do away with packagerOpts soon in favor of @expo/metro-config!\n      sourceExts: [...new Set([...packagerOpts.sourceExts, ...userSourceExts])],\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  const cliOpts = ['start'];\n  for (const [key, val] of Object.entries(packagerOpts)) {\n    // If the packager opt value is boolean, don't set\n    // --[opt] [value], just set '--opt'\n    if (val && typeof val === 'boolean') {\n      cliOpts.push(`--${key}`);\n    } else if (val) {\n      cliOpts.push(`--${key}`, val);\n    }\n  }\n\n  if (process.env.EXPO_DEBUG) {\n    cliOpts.push('--verbose');\n  }\n\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  const defaultCliPath = resolveModule('react-native/local-cli/cli.js', projectRoot, exp);\n  const cliPath = exp.rnCliPath || defaultCliPath;\n  let nodePath;\n  // When using a custom path for the RN CLI, we want it to use the project\n  // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  const nodePathEnv = nodePath ? { NODE_PATH: nodePath } : {};\n  const packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      ELECTRON_RUN_AS_NODE: '1',\n      ...nodePathEnv,\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  if (!packagerProcess.stdout) {\n    throw new Error('Expected spawned process to have a stdout stream, but none was found.');\n  }\n  if (!packagerProcess.stderr) {\n    throw new Error('Expected spawned process to have a stderr stream, but none was found.');\n  }\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  const exitPromise = new Promise((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      if (code) {\n        reject(new Error(`Metro Bundler process exited with code ${code}`));\n      } else {\n        resolve();\n      }\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  const packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  await Promise.race([_waitForRunningAsync(projectRoot, `${packagerUrl}/status`), exitPromise]);\n}\n\n// Simulate the node_modules resolution\n// If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns\n// \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  const paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    const parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nexport async function startExpoServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  const app = express();\n  app.use(\n    express.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    express.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if (\n    (ConnectionStatus.isOffline()\n      ? await Doctor.validateWithoutNetworkAsync(projectRoot)\n      : await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL\n  ) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  }\n  // Serve the manifest.\n  const manifestHandler = getManifestHandler(projectRoot);\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      const deviceId = req.get('Device-Id');\n      const deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  const expRc = await readExpRcAsync(projectRoot);\n  const expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    const info = server.address() as AddressInfo;\n    const host = info.address;\n    const port = info.port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\n\nexport async function stopExpoServerAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await axios.request({\n        method: 'post',\n        url: `http://127.0.0.1:${packagerInfo.expoServerPort}/shutdown`,\n      });\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\n\nasync function startDevServerAsync(projectRoot: string, startOptions: StartOptions) {\n  _assertValidProjectRoot(projectRoot);\n\n  const port = await _getFreePortAsync(19000); // Create packager options\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: port,\n    packagerPort: port,\n  });\n\n  const options: MetroDevServerOptions = {\n    port,\n    logger: ProjectUtils.getLogger(projectRoot),\n  };\n  if (startOptions.reset) {\n    options.resetCache = true;\n  }\n  if (startOptions.maxWorkers != null) {\n    options.maxWorkers = startOptions.maxWorkers;\n  }\n  if (startOptions.target) {\n    // EXPO_TARGET is used by @expo/metro-config to determine the target when getDefaultConfig is\n    // called from metro.config.js and the --target option is used to override the default target.\n    process.env.EXPO_TARGET = startOptions.target;\n  }\n\n  const { middleware } = await runMetroDevServerAsync(projectRoot, options);\n  middleware.use(getManifestHandler(projectRoot));\n}\n\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: ngrok.NgrokOptions,\n  hostnameAsync: () => Promise<string>,\n  ngrokPid: number | null | undefined,\n  attempts: number = 0\n): Promise<string> {\n  try {\n    const configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    const hostname = await hostnameAsync();\n    const url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError('NGROK_ERROR', e.toString());\n      } else {\n        throw new XDLError('NGROK_ERROR', JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string): Promise<void> {\n  const username = (await UserManager.getCurrentUsernameAsync()) || ANONYMOUS_USERNAME;\n  _assertValidProjectRoot(projectRoot);\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError('NO_PACKAGER_PORT', `No packager found for project at ${projectRoot}.`);\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      'NO_EXPO_SERVER_PORT',\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  const expoServerPort = packagerInfo.expoServerPort;\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  const packageShortName = path.parse(projectRoot).base;\n  const expRc = await readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      const expoServerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          const randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      const packagerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          const randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', (status: string) => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\n\nexport async function stopTunnelsAsync(projectRoot: string): Promise<void> {\n  _assertValidProjectRoot(projectRoot);\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const ngrokProcess = ngrok.process();\n  const ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number;\n  }\n): Promise<void> {\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  if (options.packagerPort != null && !Number.isInteger(options.packagerPort)) {\n    throw new XDLError('INVALID_OPTIONS', 'packagerPort must be an integer');\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\n\n// DEPRECATED(2019-08-21): use UrlUtils.constructManifestUrlAsync\nexport async function getUrlAsync(projectRoot: string, options: object = {}): Promise<string> {\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  { exp = getConfig(projectRoot).exp, ...options }: StartOptions & { exp?: ExpoConfig } = {},\n  verbose: boolean = true\n): Promise<ExpoConfig> {\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    sdkVersion: exp.sdkVersion ?? null,\n  });\n\n  if (options.webOnly) {\n    await Webpack.restartAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'web');\n    return exp;\n  } else if (getenv.boolish('EXPO_USE_DEV_SERVER', false)) {\n    await startDevServerAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'native');\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync({ projectRoot, exp, options, verbose });\n    DevSession.startSession(projectRoot, exp, 'native');\n  }\n\n  const { hostType } = await ProjectSettings.readAsync(projectRoot);\n\n  if (!Config.offline && hostType === 'tunnel') {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  return exp;\n}\n\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n  await Webpack.stopAsync(projectRoot);\n  ProjectUtils.logInfo(projectRoot, 'expo', '\\u203A Closing Expo server');\n  await stopExpoServerAsync(projectRoot);\n  ProjectUtils.logInfo(projectRoot, 'expo', '\\u203A Stopping Metro bundler');\n  await stopReactNativeServerAsync(projectRoot);\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n\n  await Android.maybeStopAdbDaemonAsync();\n}\n\nexport async function stopWebOnlyAsync(projectDir: string): Promise<void> {\n  await Webpack.stopAsync(projectDir);\n  await DevSession.stopSession();\n}\n\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise(resolve => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n      webpackServerPort: null,\n    });\n  }\n}\n"],"file":"../Project.js","sourceRoot":"/@expo/xdl@58.0.5/src"}